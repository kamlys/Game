@model Game.GUI.ViewModels.Market.MarketViewModel
@using PagedList.Mvc;
@{
    Layout = null;
}

<div id="offerSellAdd" class="modal">
    <div class="modal-content">
        @using (Html.BeginForm("AddOffer", "Market", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.HiddenFor(m => m.viewModel.TypeOffer, new { Value = true })
            <div class="input-field col s12">
                @Html.DropDownListFor(m => m.viewModel.Product_Name, new SelectList(Model.userProduct), new { @class = "validate" })
                <label for="Product_Name">Nazwa produktu</label>
            </div>

            <div class="input-field col s6" id="Number">
                @Html.TextBoxFor(m => m.viewModel.Number, new { @type = "number", @min = "1", @placeholder = "", @class = "validate", @onkeypress = "return isNumberKey(event)" })
                <label for="Number" data-error="Wartość nie może być mniejsza niż 1.">Ilość</label>
            </div>

            <div class="input-field col s6" id="Price">
                @Html.TextBoxFor(m => m.viewModel.Price, new { @type = "number", @min = "1", @placeholder = "", @class = "validate", @onkeypress = "return isNumberKey(event)" })
                <label for="Price" data-error="Wartość nie może być mniejsza niż 1.">Cena za sztukę</label>
            </div>

            <button type="submit" class="btn waves-effect waves-light addButton" name="action">Zapisz</button>
        }
    </div>
</div>
<button data-target="offerSellAdd" class="btn modal-trigger offerAdd offerSellAdd">Wystaw ofertę sprzedaży</button>

@if (!Model.pagedList.Any())
            {
    <span class="noOffer">Brak ofert</span>
}
else
{
    <div id="sellOffer">
        <table class="highlight bordered centered">

            <thead>
                <tr>
                    <th>Wystwaiający</th>
                    <th>Produkt</th>
                    <th>Ilość</th>
                    <th>Cena/szt.</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model.pagedList)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.User_Login)</td>
                        <td>@Html.DisplayFor(modelItem => @item.Product_Name)</td>
                        <td>@Html.DisplayFor(modelItem => @item.Number)</td>
                        <td>@Html.DisplayFor(modelItem => @item.Price)</td>
                        <td id="buyTd">
                            @if (User.Identity.Name != item.User_Login)
                            {
                                <input type="number" class="numValue" id='numValue_@item.ID' name="numValue" min="1" data-id="@item.ID" data-productid="@item.Product_ID" data-number="@item.Number"  value="1" onkeypress="return isNumberKey(event)">
                                <button type="submit" class="waves-effect waves-light btn buyButton" id="buyButton_@item.User_Login" onclick="buyoffer(@item.ID, @item.User_ID, @item.Product_ID, @item.Price, true)">Kup</button>
                            }
                            else
                            {
                                <button type="submit" class="waves-effect waves-light btn buyButton" id="buyButton" onclick="location.href='@Url.Action("DeleteOffer", "Market", new { id = item.ID })'">Anuluj ofertę</button>
                            }
                        </td>
                    </tr>
                }

            </tbody>
        </table>



        <div class="paginationBtn" id="paginationBtnSellOffer">
            @Html.PagedListPager(Model.pagedList, Page_No => Url.Action("_ReceivedMessage", new { Page_No }), PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new AjaxOptions() { HttpMethod = "GET", UpdateTargetId = "receivedMessage" }))
        </div>
    </div>
}

<script src="~/Scripts/jquery-2.1.4.min.js"></script>
<script src="~/Scripts/materialize.min.js"></script>
<script>

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 47 || charCode > 57)) {

            return false;
        }
        return true;
    }

    $(".numValue").bind("keyup change", function () {
        var id = $(this).data('id');
        var productid = $(this).data('productid');

        if ($("#product_" + productid).text() == "") {
            $("#numValue_" + id).val(0);
        }
        else {
            var val;
            if (parseInt($("#product_" + productid).text()) > $(this).data('number')) {
                val = $(this).data('number');
            }
            else {
                val = parseInt($("#product_" + productid).text());
            }

            $("#numValue_" + id).attr({ "max": val });
            if (parseInt($("#numValue_" + id).val()) > $("#numValue_" + id).attr("max")) {
                if (parseInt($("#numValue_" + id).val()) > val) {
                    $("#numValue_" + id).val($("#numValue_" + id).attr("max"));
                }
                else {
                    $("#numValue_" + id).val(val);
                }
            }
        }
    });

    $('.offerSellAdd').leanModal();
    $('#paginationBtnSellOffer').on('click', 'a', function (e) {
        e.preventDefault();
        if (!$(this).parents("li:first").hasClass("active")) {
            $.ajax({
                url: this.href,
                type: 'GET',
                cache: false,
                success: function (result) {
                    $('#sellOffer').html(result);
                }
            });
        }
    });
</script>