@model Game.GUI.ViewModels.Product.ProductRequirement.ProductRequirementViewModel
@{
    Layout = null;
}

<div id="requirementBox" class="requirementBox">
    <ul class="productRequirement">
        @foreach (var item in Model.listModel)
            {
                if (item.ifCan)
                {
                <li>
                    <div class="productRequirementItem">
                        <span class="productName">@item.BaseName</span>

                        <span class="inputValue">

                            @Html.TextBox("productValue", null, new
                       {
                           @class = "productreq",
                           @onkeypress = "return isNumberKey(event)",
                           @type = "number",
                           @min = "1",
                           @placeholder = "Ilość",
                           @data_product = Json.Encode(item.RequireProduct),
                           @data_baseid = item.BaseName
                       })



                            <button class="btn createButton" data-productname="@item.BaseName">Produkuj</button>
                        </span>
                        <div class="costProduct" id="costProduct_@item.BaseName">
                        </div>
                    </div>
                </li>
            }
            else
            {
                <li>
                    <div class="productRequirementItem disabled">
                        <span class="productName">@item.BaseName</span> <span class="conditions">
                            Warunki:  @item.BuildingName, oraz
                            @foreach (var product in item.RequireProduct)
                            {
                                foreach (KeyValuePair<string, int[]> p in product)
                                {
                                    <span>@p.Key: @p.Value[0]</span>
                                }
                            }
                        </span>
                    </div>
                </li>
            }
        }
    </ul>
</div>
<script>
    var productName;
    var productValue;



    $(".productreq").bind("keyup change", function () {
        var inputvalue = $(this).val();
        var temp = $(this).data('product');
        var basename = $(this).data('baseid');
        var maxValue = [];

        $("#costProduct_" + basename).empty();

        jQuery.each(temp, function (i, val) {
            var temp2 = temp[i];

            jQuery.each(temp2, function (j, val) {
                productName = Object.keys(temp[i]);
                productValue = val[0] * (inputvalue);
                var m = Math.round($("#product_" + val[1]).text() / val[0]);
                maxValue[i] = m;

            });
            $("#costProduct_" + basename).append("<div class='costName'>" +" "+ productName + ": -" + productValue +" "+"</div> ");
        });
        $(this).attr({ "max": Math.min.apply(Math, maxValue) })

        if (parseInt($(this).val()) > $(this).attr("max")) {
            var maxV = $(this).attr("max");
            $(this).val(maxV);
        }

        setTimeout(function clear() {
            $("#costProduct_" + basename).empty();
        }, 10000);
    });

    $(".createButton").click(function () {
        var value = $(this).siblings('input').val();
        var product = $(this).data('productname');
        $.ajax({
            type: "POST",
            url: 'UserProduct/CreateProduct',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ value: value, productname: product }),
            success: function (data) {
                location.reload();
            }
        });
    });

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 47 || charCode > 57)) {

            return false;
        }
        return true;
    }

    $('#requirementBox').slimScroll({
        size: '10px',
        height: '350px',
        alwaysVisible: true
    });

</script>
